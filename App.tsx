
import React, { useState, useCallback } from 'react';
import { DEVICES } from './constants';
import { Device, DeviceDetails } from './types';
import DeviceCard from './components/DeviceCard';
import DeviceDetailModal from './components/DeviceDetailModal';
import { getDeviceDetails } from './services/geminiService';

const App: React.FC = () => {
  const [selectedDevice, setSelectedDevice] = useState<Device | null>(null);
  const [modalContent, setModalContent] = useState<DeviceDetails | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  const handleCardClick = useCallback(async (device: Device) => {
    setSelectedDevice(device);
    setIsLoading(true);
    setError(null);
    setModalContent(null);
    try {
      const details = await getDeviceDetails(device.name);
      setModalContent(details);
    } catch (err) {
      setError('Failed to fetch details from the AI. Please try again later.');
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  }, []);

  const handleCloseModal = () => {
    setSelectedDevice(null);
  };

  return (
    <div className="min-h-screen bg-gray-900 text-gray-100 p-4 sm:p-6 lg:p-8">
      <header className="text-center mb-10">
        <h1 className="text-4xl sm:text-5xl font-bold text-cyan-400 tracking-wider">
          Cyber Hardware Toolkit
        </h1>
        <p className="text-gray-400 mt-2 text-lg">
          An interactive explorer for popular electronics and security hardware.
        </p>
      </header>
      
      <main>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
          {DEVICES.map((device) => (
            <DeviceCard key={device.id} device={device} onClick={handleCardClick} />
          ))}
        </div>
      </main>

      {selectedDevice && (
        <DeviceDetailModal
          device={selectedDevice}
          deviceDetails={modalContent}
          isLoading={isLoading}
          error={error}
          onClose={handleCloseModal}
        />
      )}

      <footer className="text-center mt-12 text-gray-500 text-sm">
        <p>All device descriptions and code examples generated by Google Gemini.</p>
      </footer>
    </div>
  );
};

export default App;
